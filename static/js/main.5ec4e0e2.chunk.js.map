{"version":3,"sources":["api/recipeApi.js","components/sessionContent.js","components/listSessionContent.js","components/session.js","components/listSession.js","components/recipeDetails.js","components/listRecipe.js","components/paginator.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["recipeApi","start","numberElements","searchTerm","list","undefined","totalElements","listRecipesJSON","slice","length","getRecipeByName","recipeId","find","recipe","_id","$oid","filter","nome","toLowerCase","match","SessionContent","sessionContent","Fragment","ListItem","style","marginLeft","button","ListSessionContent","listSessionContent","List","map","key","useStyles","makeStyles","defaultStyle","Session","session","classes","useState","open","setOpen","className","onClick","ListItemText","primary","Collapse","in","timeout","unmountOnExit","conteudo","ListSession","listSession","RecipeDetails","secao","ListRecipe","listRecipes","Paginator","numberTotalRecipes","actualPaginationShowing","startingPaginationShowing","actionGoPage","backButtonPagination","setBackButtonPagination","forwardButtonPagination","setForwardButtonPagination","firstPageButtonPagination","setFirstPageButtonPagination","lastPageButtonPagination","setLastPageButtonPagination","pageNumberToGo","setPageNumberToGo","useEffect","Button","Math","ceil","Grid","container","spacing","justify","item","xs","md","direction","alignItems","ButtonGroup","size","aria-label","Search","doSearch","InputBase","placeholder","onChange","e","target","value","App","setStartingPaginationShowing","setActualPaginationShowing","numberElementsPerPage","dataListRecipes","setDataListRecipes","setSearchTerm","a","getRecipes","returnDataListRecipes","fetchData","toSearch","total","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ec4e0e2.chunk.js","sourcesContent":["import listRecipesJSON from '../data/recipes.json';\r\n\r\nconst recipeApi = {};\r\n\r\nrecipeApi.getRecipes = (start, numberElements, searchTerm) => {\r\n    var list = undefined;\r\n    var totalElements = 0;\r\n    if(searchTerm === undefined){\r\n        list = listRecipesJSON.slice(start * numberElements, (start * numberElements) + numberElements);\r\n        totalElements = listRecipesJSON.length;\r\n    }else{\r\n        list = recipeApi.getRecipeByName(searchTerm);\r\n        totalElements = list.length;\r\n        list = list.slice(start * numberElements, (start * numberElements) + numberElements);        \r\n        \r\n    }    \r\n    return {\r\n        'list': list,\r\n        'total': totalElements\r\n    };\r\n};\r\n\r\nrecipeApi.getRecipeById = (recipeId) => {\r\n    return listRecipesJSON.find(recipe => recipe._id.$oid === recipeId);\r\n};\r\n\r\nrecipeApi.getRecipeByName = (searchTerm) =>{\r\n    const results = listRecipesJSON.filter(function(recipe){ return recipe.nome.toLowerCase().match(searchTerm.toLowerCase())});\r\n    return results;\r\n}\r\n\r\nexport default recipeApi;","import React from 'react'\r\nimport { ListItem } from '@material-ui/core'\r\n\r\nfunction SessionContent({sessionContent}){\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <ListItem style={{marginLeft: '5%'}} button>                \r\n                {sessionContent}\r\n            </ListItem>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SessionContent;","import React from 'react';\r\nimport SessionContent from './sessionContent';\r\nimport { List } from '@material-ui/core';\r\n\r\nfunction ListSessionContent({listSessionContent}){\r\n    return(\r\n        <List>\r\n            {\r\n                listSessionContent.map((sessionContent, key) => (\r\n                    <SessionContent key={key} sessionContent={sessionContent}></SessionContent>\r\n                )) \r\n            }\r\n        </List>\r\n        \r\n    )\r\n}\r\n\r\nexport default ListSessionContent;","import React, {useState} from 'react'\r\nimport ListSessionContent from './listSessionContent.js'\r\nimport { ListItem,List, ListItemText, Collapse } from '@material-ui/core'\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport {makeStyles} from '@material-ui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    defaultStyle: {\r\n        marginLeft: '5%',\r\n    }\r\n});\r\n\r\nfunction Session({session}){\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <List /*style={{marginLeft: '5%'}}*/ className={classes.defaultStyle}>\r\n                <ListItem button onClick={handleClick}>\r\n                    <ListItemText primary={session.nome}/>                    \r\n                    {open ? <ExpandLess/> : <ExpandMore/>}\r\n                </ListItem>                \r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                    <ListSessionContent listSessionContent={session.conteudo}></ListSessionContent>                \r\n                </Collapse>\r\n                \r\n            </List>\r\n            \r\n            \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default Session;","import React from 'react';\r\nimport Session from './session.js';\r\n\r\n\r\n\r\nfunction ListSession({listSession}){\r\n    \r\n    return(\r\n            listSession.map((session, key) => (            \r\n                <Session key={key} session={session}></Session>\r\n            ))                            \r\n    )\r\n}\r\n\r\nexport default ListSession;","import React, { useState } from 'react';\r\nimport ListSession from './listSession.js';\r\nimport { ListItemText, Collapse } from '@material-ui/core';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nfunction RecipeDetails({recipe}){    \r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <ListItem button onClick={handleClick}>\r\n                <ListItemText primary={recipe.nome}></ListItemText>\r\n                {open ? <ExpandLess/> : <ExpandMore/>}\r\n            </ListItem>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <ListSession listSession={recipe.secao}></ListSession>                        \r\n            </Collapse>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeDetails;","import React from 'react';\r\nimport RecipeDetails from './recipeDetails.js';\r\nimport List from '@material-ui/core/List';\r\n\r\n\r\nfunction ListRecipe({listRecipes}){\r\n    return(\r\n        <List>\r\n            {\r\n                listRecipes.map((recipe, key) => (\r\n                    <RecipeDetails key={key} recipe={recipe}></RecipeDetails>\r\n                ))\r\n            }\r\n        </List>\r\n        \r\n    )\r\n}\r\n\r\nexport default ListRecipe;","import React, { useState, useEffect} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nfunction Paginator({numberTotalRecipes, startingPaginationShowing, actualPaginationShowing, actionGoPage}){\r\n\r\n    const [backButtonPagination, setBackButtonPagination] = useState(null);\r\n    const [forwardButtonPagination, setForwardButtonPagination] = useState(null);\r\n    const [firstPageButtonPagination, setFirstPageButtonPagination] = useState(null);\r\n    const [lastPageButtonPagination, setLastPageButtonPagination] = useState(null);\r\n    const [pageNumberToGo, setPageNumberToGo] = useState(0);\r\n\r\n    useEffect(() =>{\r\n        actionGoPage(pageNumberToGo);\r\n        setBackButtonPagination(actualPaginationShowing > 0 ? <Button onClick={() => setPageNumberToGo(actualPaginationShowing - 1)}>{\"<\"}</Button> : undefined);        \r\n        setForwardButtonPagination(actualPaginationShowing < (Math.ceil((numberTotalRecipes) / 5) - 1) ? <Button onClick={() => setPageNumberToGo(actualPaginationShowing + 1)}>{\">\"}</Button> : undefined);\r\n        setFirstPageButtonPagination(actualPaginationShowing > 0 ? <Button onClick={() => setPageNumberToGo(0)}>{\"<<\"}</Button> : undefined);\r\n        setLastPageButtonPagination(actualPaginationShowing < ((Math.ceil(numberTotalRecipes) / 5) - 1) ? <Button onClick={() => setPageNumberToGo(Math.ceil(numberTotalRecipes / 5) - 1)}>{\">>\"}</Button> : undefined);            \r\n    },[actionGoPage, pageNumberToGo, actualPaginationShowing, setPageNumberToGo, numberTotalRecipes]);\r\n\r\n    return(           \r\n        <Grid container spacing={3} justify=\"center\">\r\n            <Grid item xs={12} md={6}>\r\n                <Grid container direction=\"column\" alignItems=\"center\">                \r\n                    <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">                        \r\n                        {firstPageButtonPagination}\r\n                        {backButtonPagination}\r\n                        {\r\n                            <Button>\r\n                                {actualPaginationShowing + 1}\r\n                            </Button>\r\n                        }\r\n                        {forwardButtonPagination}\r\n                        {lastPageButtonPagination}\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nfunction Search({doSearch}){\r\n\r\n    return(\r\n        <InputBase\r\n            placeholder=\"Pesquisa\"\r\n            onChange={(e) => doSearch(e.target.value)}/>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, {useState, useEffect} from 'react';\r\nimport recipeApi from './api/recipeApi.js';\r\nimport ListRecipe from './components/listRecipe.js';\r\nimport Paginator from './components/paginator.js';\r\nimport Search from './components/search.js';\r\n\r\nfunction App(){  \r\n  const [startingPaginationShowing, setStartingPaginationShowing] = useState(0);\r\n  const [actualPaginationShowing, setActualPaginationShowing] = useState(0);\r\n  const numberElementsPerPage = 5;\r\n  const [dataListRecipes, setDataListRecipes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    async function fetchData(){\r\n      const returnDataListRecipes = await recipeApi.getRecipes(startingPaginationShowing, numberElementsPerPage, searchTerm);\r\n      setDataListRecipes(returnDataListRecipes);      \r\n    }\r\n    fetchData();\r\n  },[startingPaginationShowing, numberElementsPerPage, searchTerm]);\r\n  \r\n  const actionGoPage = async (pageNumberToGo) => {       \r\n    setActualPaginationShowing(pageNumberToGo);\r\n    setStartingPaginationShowing(pageNumberToGo);\r\n  };\r\n    \r\n  const doSearch = (toSearch) =>{\r\n    setSearchTerm(toSearch);\r\n  }\r\n\r\n  return (\r\n    dataListRecipes.list !== undefined ?\r\n      <div>\r\n        <Search doSearch={doSearch}></Search>\r\n        <ListRecipe listRecipes={dataListRecipes.list}></ListRecipe>\r\n        <Paginator          \r\n          numberTotalRecipes={dataListRecipes.total} \r\n          startingPaginationShowing={startingPaginationShowing} \r\n          actualPaginationShowing={actualPaginationShowing}\r\n          actionGoPage={actionGoPage}></Paginator>\r\n      </div>:<div>Aguarde</div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}